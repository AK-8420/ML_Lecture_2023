function [w, converge_rate, i] = Advanced_PG(data)
%----------------------------
% RMSProp
%----------------------------
% training setting
stop_criteria = 1e-8;
eta = 1/max(eig(data.A));
rho = 0.9;

% function
J = @(w) 1/2*((w - data.mu)')*data.A*(w - data.mu) + data.lambda*sum(abs(w));
dp = @(w) 1/2*(data.A + data.A')*(w - data.mu);
ST = @(x, gamma) sign(x).*max(abs(x)-gamma, 0);

% initializing
w = zeros(size(data.mu));
h = zeros(size(w));

% main loop
converge_rate = zeros(1, data.max_iteration);

for i = 1:data.max_iteration
    w_pre = w;
    dpw = dp(w_pre);

    h = rho*h + (1 - rho)*(dpw.^2);
    eta_t = eta/(sqrt(h) + eps);
    w = ST(w_pre - eta_t*dpw, data.lambda*eta_t');

    converge_rate(i) = abs(J(w_pre) - J(w));

    if converge_rate(i) < stop_criteria
        break;
    end
end

% %----------------------------
% % Adam (Not working)
% %----------------------------
% % training setting
% stop_criteria = 1e-8;
% eta = 1/max(eig(data.A));
% beta1 = 0.9;
% beta2 = 0.9;
% 
% % function
% J = @(w) 1/2*((w - data.mu)')*data.A*(w - data.mu) + data.lambda*sum(abs(w));
% dp = @(w) 1/2*(data.A + data.A')*(w - data.mu);
% ST = @(x, gamma) sign(x).*max(abs(x)-gamma, 0);
% 
% % initializing
% w = [3; -1];
% m = zeros(size(w));
% v = zeros(size(w));
% 
% % main loop
% converge_rate = zeros(1, data.max_iteration);
% 
% for i = 1:data.max_iteration
%     w_pre = w;
%     dpw = dp(w_pre);
% 
%     m = beta1*m + (1 - beta1)*dpw;
%     v = beta2*v + (1 - beta2)*(dpw.^2);
%     m_hat = m/(1 - beta1^i);
%     v_hat = v/(1 - beta2^i);
% 
%     w = ST(w_pre - eta*m_hat./(sqrt(v_hat) + eps), data.lambda*(eta./(sqrt(v_hat) + eps)));
% 
%     converge_rate(i) = abs(J(w_pre) - J(w));
% 
%     if converge_rate(i) < stop_criteria
%         break;
%     end
% end